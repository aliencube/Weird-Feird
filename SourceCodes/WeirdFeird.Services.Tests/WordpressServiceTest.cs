using Aliencube.WeirdFeird.Configurations;
using Aliencube.WeirdFeird.Configurations.Interfaces;
using Aliencube.WeirdFeird.Services.Interfaces;
using NUnit.Framework;
using NSubstitute;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;

namespace Aliencube.WeirdFeird.Services.Tests
{
    /// <summary>
    /// This represents an entity to test wordpress feeds.
    /// </summary>
    [TestFixture]
    public class WordpressServiceTest
    {
        private IWeirdFeirdSettings _settings;
        private IWordpressRssService _wordpress;

        #region SetUp / TearDown

        [SetUp]
        public void Init()
        {
            this._settings = ConfigurationManager.GetSection("weirdFeird") as WeirdFeirdSettings;
            this._wordpress = new WordpressRssService(this._settings);
        }

        [TearDown]
        public void Dispose()
        {
            this._wordpress.Dispose();
            this._settings.Dispose();
        }

        #endregion SetUp / TearDown

        #region Tests

        /// <summary>
        /// Tests to get XML contents from given feed URLs.
        /// </summary>
        /// <param name="feedUrls">List of feed URLs.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed",
                  "http://justinchronicles.net/tag/weird-meetup/feed")]
        public async void GetXmlDocs_GivenFeedUrls_XmlDocsReturned(params string[] feedUrls)
        {
            var feeds = new List<XDocument>();
            foreach (var feedUrl in feedUrls)
            {
                var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
                feeds.Add(feed);
            }

            Assert.IsTrue(feeds.All(p => p.Root != null));
        }

        /// <summary>
        /// Tests to check the feed is in RSS format.
        /// </summary>
        /// <param name="feedUrl">Feed URL.</param>
        /// <param name="expected">Expected value that specifies whether it is RSS feed or not.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed", true)]
        public async void CheckRssFeed_GivenFeedUrl_RssConfirmed(string feedUrl, bool expected)
        {
            var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
            var isRss = this._wordpress.IsRss(feed);

            Assert.AreEqual(expected, isRss);
        }

        /// <summary>
        /// Tests to check the feed is generated by Wordpress.
        /// </summary>
        /// <param name="feedUrl">Feed URL.</param>
        /// <param name="expected">Expected value that specifies whether it is Wordpress feed or not.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed", true)]
        public async void CheckWordpressFeed_GivenFeedUrl_WordpressConfirmed(string feedUrl, bool expected)
        {
            var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
            var isWordpress = this._wordpress.IsWordpress(feed);

            Assert.AreEqual(expected, isWordpress);
        }

        /// <summary>
        /// Tests to create a Wordpress Items data container instance derived from Wordpress RSS feed.
        /// </summary>
        /// <param name="feedUrl">Feed URL.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed")]
        public async void GetWordpressItems_GivenFeedUrl_WordpressItemsReturned(string feedUrl)
        {
            var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
            var elements = feed.Descendants("item").ToList();
            var items = this._wordpress.GetWordpressItems(elements);

            Assert.IsTrue(items.Any());
        }

        /// <summary>
        /// Tests to create a Wordpress Channel data container instance derived from Wordpress RSS feed.
        /// </summary>
        /// <param name="feedUrl">Feed URL.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed")]
        public async void GetWordpressChannel_GivenFeedUrl_WordpressChannelReturned(string feedUrl)
        {
            var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
            var element = feed.Descendants("channel").SingleOrDefault();
            var channel = this._wordpress.GetWordpressChannel(element);

            Assert.IsTrue(channel != null);
        }

        /// <summary>
        /// Tests to create a Wordpress RSS data container instance derived from Wordpress RSS feed.
        /// </summary>
        /// <param name="feedUrl">Feed URL.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed")]
        public async void GetWordpressRss_GivenFeedUrl_WordpressRssReturned(string feedUrl)
        {
            var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
            var wp = this._wordpress.GetWordpressRss(feed);

            Assert.IsTrue(wp.Channel.Items.Any());
        }

        #endregion Tests
    }
}