using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using System.Xml.Schema;
using Aliencube.WeirdFeird.Configurations;
using Aliencube.WeirdFeird.Configurations.Interfaces;
using Aliencube.WeirdFeird.Services.Interfaces;
using Aliencube.WeirdFeird.ViewModels.Enums;
using Aliencube.WeirdFeird.ViewModels.Feeds.Atom;
using Aliencube.WeirdFeird.ViewModels.Feeds.Extensions;
using Aliencube.WeirdFeird.ViewModels.Feeds.Wordpress;
using Aliencube.WeirdFeird.ViewModels.Interfaces.Atom;
using Aliencube.WeirdFeird.ViewModels.Interfaces.Wordpress;
using NUnit.Framework;
using NSubstitute;
using Category = Aliencube.WeirdFeird.ViewModels.Feeds.Rss.Category;
using Content = Aliencube.WeirdFeird.ViewModels.Feeds.Extensions.Content;
using Guid = Aliencube.WeirdFeird.ViewModels.Feeds.Rss.Guid;

namespace Aliencube.WeirdFeird.Services.Tests
{
    /// <summary>
    /// This represents an entity to test wordpress feeds.
    /// </summary>
    [TestFixture]
    public class WordpressServiceTest
    {
        private IWeirdFeirdSettings _settings;
        private IWordpressRssService _wordpress;

        #region SetUp / TearDown

        [SetUp]
        public void Init()
        {
            this._settings = ConfigurationManager.GetSection("weirdFeird") as WeirdFeirdSettings;
            this._wordpress = new WordpressRssService(this._settings);
        }

        [TearDown]
        public void Dispose()
        {
            this._wordpress.Dispose();
            this._settings.Dispose();
        }

        #endregion

        #region Tests

        /// <summary>
        /// Tests to get XML contents from given feed URLs.
        /// </summary>
        /// <param name="feedUrls">List of feed URLs.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed",
                  "http://justinchronicles.net/tag/weird-meetup/feed")]
        public async void GetXmlDocs_GivenFeedUrls_XmlDocsReturned(params string[] feedUrls)
        {
            var feeds = new List<XDocument>();
            foreach (var feedUrl in feedUrls)
            {
                var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
                feeds.Add(feed);
            }

            Assert.IsTrue(feeds.All(p => p.Root != null));
        }

        /// <summary>
        /// Tests to check the feed is in RSS format.
        /// </summary>
        /// <param name="feedUrl">Feed URL.</param>
        /// <param name="expected">Expected value that specifies whether it is RSS feed or not.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed", true)]
        public async void CheckRssFeed_GivenFeedUrl_RssConfirmed(string feedUrl, bool expected)
        {
            var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
            var isRss = this._wordpress.IsRss(feed);

            Assert.AreEqual(expected, isRss);
        }

        /// <summary>
        /// Tests to check the feed is generated by Wordpress.
        /// </summary>
        /// <param name="feedUrl">Feed URL.</param>
        /// <param name="expected">Expected value that specifies whether it is Wordpress feed or not.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed", true)]
        public async void CheckWordpressFeed_GivenFeedUrl_WordpressConfirmed(string feedUrl, bool expected)
        {
            var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
            var isWordpress = this._wordpress.IsWordpress(feed);

            Assert.AreEqual(expected, isWordpress);
        }

        /// <summary>
        /// Tests to create a data container instance derived from Wordpress RSS feed.
        /// </summary>
        /// <param name="feedUrl">Feed URL.</param>
        [Test]
        [TestCase("http://blog.aliencube.org/tag/weird-meetup/feed")]
        public async void GetWordpressRss_GivenFeedUrl_WordpressRssReturned(string feedUrl)
        {
            var content = this._wordpress.Namespaces["content"];
            var wfw = this._wordpress.Namespaces["wfw"];
            var dc = this._wordpress.Namespaces["dc"];
            var atom = this._wordpress.Namespaces["atom"];
            var sy = this._wordpress.Namespaces["sy"];
            var slash = this._wordpress.Namespaces["slash"];

            var feed = await this._wordpress.GetFeedXmlAsync(feedUrl);
            var channel = feed.Root.Element("channel");
            var wp = new WordpressRss()
                     {
                         Channel = new WordpressChannel()
                                   {
                                       Title = channel.Element("title").Value,
                                       AtomLink = new Link()
                                                  {
                                                      Href = channel.Element(atom + "link").Attribute("href").Value,
                                                      Rel = channel.Element(atom + "link").Attribute("rel").Value,
                                                      Type = channel.Element(atom + "link").Attribute("type").Value,
                                                  },
                                       Link = channel.Element("link").Value,
                                       Description = channel.Element("description").Value,
                                       LastBuildDate = Convert.ToDateTime(channel.Element("lastBuildDate").Value),
                                       Language = channel.Element("language").Value,
                                       Syndication = new Syndication()
                                                     {
                                                         UpdatePeriod = (UpdatePeriod)Enum.Parse(typeof(UpdatePeriod), channel.Element(sy + "updatePeriod").Value, true),
                                                         UpdateFrequency = Convert.ToInt32(channel.Element(sy + "updateFrequency").Value)
                                                     },
                                       Generator = channel.Element("generator").Value,
                                       Items = channel.Elements("item")
                                                      .Select(p => new WordpressItem()
                                                                   {
                                                                       Title = p.Element("title").Value,
                                                                       Link = p.Element("link").Value,
                                                                       Comments = p.Element("comments").Value,
                                                                       PubDate = Convert.ToDateTime(p.Element("pubDate").Value),
                                                                       DublinCore = new DublinCore() { Creator = p.Element(dc + "creator").Value },
                                                                       Categories = p.Elements("category")
                                                                                     .Select(q => new Category()
                                                                                                  {
                                                                                                      Domain = q.Attribute("domain") != null ? q.Attribute("domain").Value : null,
                                                                                                      Value = q.Value
                                                                                                  })
                                                                                     .ToList(),
                                                                       Guid = new Guid()
                                                                              {
                                                                                  IsPermaLink = Convert.ToBoolean(p.Element("guid")
                                                                                                                   .Attribute("isPermaLink")
                                                                                                                   .Value),
                                                                                  Value = p.Element("guid").Value
                                                                              },
                                                                       Description = p.Element("description").Value,
                                                                       Content = new Content() { Encoded = p.Element(content + "encoded").Value },
                                                                       WellFormedWeb = new WellFormedWeb() { CommentRss = p.Element(wfw + "commentRss").Value },
                                                                       Slash = new Slash() { Comments = Convert.ToInt32(p.Element(slash + "comments").Value)}
                                                                   })
                                                      .ToList()
                                   }
                     };

            Assert.IsTrue(wp.Channel.Items.Any());
        }

        #endregion
    }
}
